name: 'Pipelines.Steps.Data $(major).$(minor).$(patch).$(buildId)$(suffix)'

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - Steps/Data/*
    exclude:
    - changelog.md
    - README.md
    - License.md

pr:
  branches:
    include:
    - master
  paths:
    include:
    - Steps/Data/*
    exclude:
    - changelog.md
    - README.md
    - License.md

pool:
  vmImage: 'windows-latest'

variables:
- name: 'solution'
  value: '**/Steps/Data/*.sln'

- name: 'buildPlatform'
  value: 'Any CPU'

- name: 'buildConfiguration'
  value: 'Release'

- group: 'MyTrout.Pipelines.Steps.Data.Version'

- name: 'buildId'
  value: $[counter(variables['patch'], 0)]

- name: 'publishVstsFeed'
  value: 'Pipelines/mytrout'

- name: 'sonarCloudConnectionName'
  value: 'SonarCloud.io - Pipelines'

- name: 'sonarCloudOrganization'
  value: 'mytrout'

- name: 'sonarCloudProjectKey'
  value: 'Pipelines.Steps.Data'

- name: 'sonarCloudProjectName'
  value: 'Pipelines.Steps.Data'

- name: 'sonarCloudEnabled'
  value: 'YES'

- name: 'primarySourceBranch'
  value: 'refs/heads/master'

- name: 'resourceGroupName'
  value: 'mytrout-sqlserver-$(Build.Reason)-$(major).$(minor).$(patch).$(buildId)$(suffix)-rg'

- name: 'resourceGroupLocation'
  value: 'Central US'

- name: 'databaseName'
  value: 'Cartoon'

- name: 'databaseServerName'
  value: 'mytrout-sqlserver-$(major)-$(minor)-$(patch)-$(buildId)-svr'

steps:
  # This PowerShell step provides more visibility into the non-master branch builds at the pipeline level
  #     by adding the branch name on non-master builds.
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
        if ("$(Build.SourceBranch)" -eq "$(primarySourceBranch)") {
          Write-Host "Master branch build - no name change required."
        }
        else {
          Write-Host "##vso[build.updatebuildnumber]$(Build.BuildNumber)-$(Build.SourceBranchName)"
        }    
    failOnStderr: true
  displayName: 'Alter the Build Number if a non master branch build is requested.'

- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Subscription'
    azureResourceManagerConnection: 'MyTrout Azure Subscription (45263e77-2d46-4175-8047-299a9b696ad2)'
    subscriptionId: '45263e77-2d46-4175-8047-299a9b696ad2'
    location: '$(resourceGroupLocation)'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)/Steps/Data/azure-arm-resourcegroup.json'
    overrideParameters: '-location "$(resourceGroupLocation)" -resourceGroupName "$(resourceGroupName)"'
    deploymentMode: 'Incremental'
  displayName: 'Create temporary Resource Group for Service Bus instance.'   

- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'MyTrout Azure Subscription (45263e77-2d46-4175-8047-299a9b696ad2)'
    subscriptionId: '45263e77-2d46-4175-8047-299a9b696ad2'
    action: 'Create Or Update Resource Group'
    resourceGroupName:  '$(resourceGroupName)'
    location: '$(resourceGroupLocation)'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)/Steps/Data/azure-arm-sqlserver.json'
    overrideParameters: '-location "$(resourceGroupLocation)" -databaseName "$(databaseName)" -databaseServerName "$(databaseServerName)"'
    deploymentMode: 'Incremental'
    deploymentOutputs: 'DatabaseCreatedOutput'
  displayName: 'Create temporary SQL Server Database in temporary Resource Group.'

- task: MSBuild@1
  inputs:
    solution: '**/*.sqlproj'
    msbuildArchitecture: x64
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)
    msBuildArguments: '/p:TargetFramework=v4.8;Version=$(major).$(minor).$(patch)$(suffix);AssemblyVersion=$(major).$(minor).$(patch).$(buildId);FileVersion=$(major).$(minor).$(patch).$(buildId)' 
  displayName: 'Build the DACPAC.'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Format-List -InputObject $($env:DatabaseCreatedOutput)
      $outputs = ConvertFrom-Json $($env:DatabaseCreatedOutput)
      $connectionString = $outputs.ConnectionString.value
      
      if($connectionString -eq $null) {
        throw [System.IO.Exception] "Connection String not found."
      } else {
        [System.Environment]::SetEnvironmentVariable('PIPELINE_TEST_AZURE_SQL_SERVER_CONNECTION_STRING', "$connectionString",[System.EnvironmentVariableTarget]::Machine)  
        Write-Host "##vso[task.setvariable variable=ConnectionString;]$connectionString"
      }
    failOnStderr: true
  displayName: 'Add the Azure SQL Server Connection String to the build server.'

- task: SqlAzureDacpacDeployment@1
  inputs:
    azureSubscription: 'MyTrout Azure Subscription (45263e77-2d46-4175-8047-299a9b696ad2)'
    AuthenticationType: 'connectionString'
    ConnectionString: '$(ConnectionString)'
    deployType: 'DacpacTask'
    DeploymentAction: 'Publish'
    DacpacFile: '**/*.dacpac'
    IpDetectionMethod: 'AutoDetect'
  displayName: "Apply the DACPAC to the temporary SQL Server Instance."

- template: ../../nuget-build-template.yml

- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'MyTrout Azure Subscription (45263e77-2d46-4175-8047-299a9b696ad2)'
    subscriptionId: '45263e77-2d46-4175-8047-299a9b696ad2'
    action: 'DeleteRG'
    resourceGroupName: '$(resourceGroupName)'
  condition: always()
  displayName: 'Delete temporary Resource Group.'