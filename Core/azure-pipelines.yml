trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  project: '$(Build.SourcesDirectory)/Core/src/Cross.Pipelines.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: 0
  minor: $[counter(variables['major'], 0)]
  patch: $[counter(variables['minor'], 0)]

steps:
- task: RegExMatchReplace@2
  inputs:
    PathToFile: '$(project)'
    RegEx: '\<AssemblyVersion\>.*\<\/AssemblyVersion\>'
    ValueToReplace: '<AssemblyVersion>$(major).$(minor).$(patch).$(Build.BuildId)</AssemblyVersion>'
  displayName: 'Replace AssemblyVersion on Linux/Windows'

- task: RegExMatchReplace@2
  inputs:
    PathToFile: '$(project)'
    RegEx: '\<FileVersion\>.*\<\/FileVersion\>'
    ValueToReplace: '<FileVersion>$(major).$(minor).$(patch).$(Build.BuildId)</FileVersion>'
  displayName: 'Replace FileVersion on Linux/Windows'

- task: RegExMatchReplace@2
  inputs:
    PathToFile: '$(project)'
    RegEx: '\<Version\>.*\<\/Version\>'
    ValueToReplace: '<Version>$(major).$(minor).$(patch)-beta</Version>'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
  displayName: 'Replace Version on Linux/Windows on master builds'

- task: RegExMatchReplace@2
  inputs:
    PathToFile: '$(project)'
    RegEx: '\<Version\>.*\<\/Version\>'
    ValueToReplace: '<Version>$(major).$(minor).$(patch)-beta</Version>'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master')) 
  displayName: 'Replace Version on Linux/Windows on non-master branch'

- task: NuGetToolInstaller@1
  displayName: 'Install latest version of NuGet Tools'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
  displayName: 'Restore nuget packages for the solution'

- task: DotNetCoreCLI@2
  inputs:
     command: build
     projects: $(solution)
     arguments: '--configuration $(buildConfiguration)'
  displayName: 'Build the solution'

- task: DotNetCoreCLI@2
  inputs:
     command: test
     projects: $(solution)
     arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
  displayName: 'Run the automated tests'

- task: DotNetCoreCLI@2
  inputs:
     command: publish
     publishWebProjects: False
     arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/dll'
     zipAfterPublish: True 
  displayName: 'Publish the dlls to the $(ArtifactStagingDirectory)/dll'

# Push a project
#- task: NuGetCommand@2
#  inputs:
#    packagesToPush: '**/*.nupkg;!**/*.symbols.nupkg'
#    command: 'push'
#    configuration: $(buildConfiguration)
#    allowPackageConflicts: true
#    nuGetFeedType: 'internal'
#    publishVstsFeed: 'ea2302d5-a8d1-481c-a7f8-40b10b1d7556/7408c788-39c6-442b-8fad-e72439da7221'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#  displayName: 'Publish the nuget package to Cross.Pipelines'