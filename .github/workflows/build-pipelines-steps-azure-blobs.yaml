name: MyTrout.Pipelines.Steps.Azure.Blobs

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-pipelines-steps-azure-blobs.yaml'
      - '**/Pipelines/Steps/Azure/Blobs/**/*.*'
      - '!**/*.md'
      - '!**/*.json'
  pull_request:
    paths:
      - '.github/workflows/build-pipelines-steps-azure-blobs.yaml'
      - '**/Pipelines/Steps/Azure/Blobs/**/*.*'
      - '!**/*.md'
      - '!**/*.json'
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.MYTROUT_SONARQUBE_API_KEY }}
  SONAR_HOST_URL: ${{ secrets.MYTROUT_SONARQUBE_HOST_URL }}

  # These values should be changed for each individual solution. Don't forget to change the name element and paths elements. 
  SONAR_PROJECT_NAME: 'Pipelines.Steps.Azure.Blobs'
  WORKING_DIRECTORY: '/Steps/Azure/Blobs'
  SOLUTION_NAME: 'MyTrout.Pipelines.Steps.Azure.Blobs.sln'
  
  # This value should change on each deployable version of this solution.
  PROJECT_VERSION: '3.2.0'
      
  # These values are used for creating an Azure Blob Storage Container
  # Azure Servers cannot have periods, underscores, or upper case letters in the name.
  AZURE_SERVER_NAME: 'pipelines-steps-azure-blobs'

jobs:
  build:
    needs: azure-pre-processing
    uses: './.github/workflows/template-build-pipelines.yaml'
    with:
      # These values should be changed for each individual solution. Don't forget to change the name element and paths elements. 
      sonar-project-name: ${{ needs.azure-pre-processing.outputs.sonar-project-name }}
      working-directory: ${{ needs.azure-pre-processing.outputs.working-directory }}
      solution-name: ${{ needs.azure-pre-processing.outputs.solution-name}}
      project-version: ${{ needs.azure-pre-processing.outputs.project-version }}
      test-name-1: 'PIPELINE_TEST_AZURE_BLOB_CONNECTION_STRING'
      test-value-1: ${{ needs.azure-pre-processing.outputs.connection-string }}
    secrets: inherit

  azure-pre-processing:
    runs-on: windows-latest
    outputs:
      connection-string: ${{ steps.azureblob.outputs.ConnectionString }}
      sonar-project-name: ${{ env.SONAR_PROJECT_NAME }}
      working-directory: ${{ env.WORKING_DIRECTORY }}
      solution-name: ${{ env.SOLUTION_NAME }}
      project-version: ${{ env.PROJECT_VERSION }}

    steps:
      - name: Checkout the Source
        uses: actions/checkout@v3

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MYTROUT_AZURE_TOKEN }}
        
      - name: 'Deploy Azure Resource Group'
        uses: Azure/arm-deploy@v1
        env:
          AZURE_RG_NAME: RG_${{ env.SONAR_PROJECT_NAME }}_${{ github.run_number }}
        with:
          scope: 'subscription'
          region: 'centralus'
          template: ${{ github.workspace }}${{ env.WORKING_DIRECTORY }}/azure-arm-resourcegroup.json
          deploymentName: DEPLOY_RG_${{ env.SONAR_PROJECT_NAME }}_${{ github.run_number }}
          parameters: resourceGroupName=${{ env.AZURE_RG_NAME }}
      
      - name: 'Deploy Blob Storage'
        uses: azure/arm-deploy@v1
        env: 
            AZURE_RG_NAME: RG_${{ env.SONAR_PROJECT_NAME }}_${{ github.run_number }}
            AZURE_STORAGE_NAME: mytroutstorage${{ github.run_number }}
        id: azureblob
        with:
          resourceGroupName: ${{ env.AZURE_RG_NAME }}
          template: ${{ github.workspace }}${{ env.WORKING_DIRECTORY }}/azure-arm-blobs.json
          deploymentName: DEPLOY_BLOB_${{ env.SONAR_PROJECT_NAME }}_${{ github.run_number }}
          parameters: storageAccountName=${{ env.AZURE_STORAGE_NAME }}

  azure-post-processing:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() }}
    steps:
      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MYTROUT_AZURE_TOKEN }}

      - name: Delete resource group
        uses: Azure/CLI@v1
        env:
          AZURE_RG_NAME: RG_${{ env.SONAR_PROJECT_NAME }}_${{ github.run_number }}
        if: ${{ always() }}
        with:
          inlineScript: |
            #!/bin/bash
            if $(az group exists --name ${{ env.AZURE_RG_NAME }}) ; then
              echo "Deleting Azure resource group..."
              az group delete --name ${{ env.AZURE_RG_NAME }} -y
              echo "Azure resource group deleted"
            else            
              echo "Azure resource group doesn't exist, skipping deletion"
            fi
