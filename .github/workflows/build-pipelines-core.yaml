name: MyTrout.Pipelines

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/build-pipelines-core.yaml'
      - '**/Pipelines/Core/**/*.*'
      - '!**/*.md'
      - '!**/*.json'
  pull_request:
    paths:
      - '.github/workflows/build-pipelines-core.yaml'
      - '**/Pipelines/Core/**/*.*'
      - '!**/*.md'
      - '!**/*.json'
jobs:
  build:

    runs-on: ubuntu-latest
    
    env:
        SONAR_TOKEN: ${{ secrets.MYTROUT_SONARQUBE_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout the Source
        uses: actions/checkout@v2

      - name: Setup .NET Core SDK 5.0.x
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.x'
      
      # dotnet restore can only restore one project file when a ROOT is specified.
      # removed --no-restore from dotnet build as it will implicitly restore all contained projects' dependencies.
      
      - name: Build
        run: dotnet build ../Pipelines/Core/*.sln --configuration Release 

      - name: Test
        run: dotnet test ../Pipelines/Core/test/*.csproj --logger trx --results-directory "TestResults" --no-restore --verbosity normal

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: TestResults
          # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: SonarScanner for .NET 5.0
        uses: highbyte/sonarscan-dotnet@2.0
        with:
          sonarProjectKey: Pipelines.Core
          sonarProjectName:  Pipelines.Core
          sonarOrganization: mytrout
          dotnetBuildArguments: ../Pipelines/Core/*.sln --configuration Release
          dotnetTestArguments: ../Pipelines/Core/test/*.csproj --logger trx --results-directory "TestResults" --no-restore --verbosity normal
        if: ${{ github.ref == 'refs/heads/master' }}


      #- name: Publish the package to nuget.org
      #  run: dotnet nuget push "../Pipelines/Core/src/bin/Release/*.nupkg" --api-key ${{ secrets.MYTROUT_NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json"
      #  if: ${{ github.ref == 'refs/heads/master' }}

      #- name: Publish the package to GitHub.
      #  run: dotnet nuget push "../Pipelines/Core/src/bin/Release/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/mytrout/index.json"
      #  if: ${{ github.ref == 'refs/heads/master' }}
 
