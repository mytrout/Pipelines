name: MyTrout.Pipelines.Steps.Data

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/build-pipelines-steps-data.yaml'
      - '**/Pipelines/Steps/Data/**/*.*'
      - '!**/*.md'
      - '!**/*.json'
  pull_request:
    paths:
      - '.github/workflows/build-pipelines-steps-data.yaml'
      - '**/Pipelines/Steps/Data/**/*.*'
      - '!**/*.md'
      - '!**/*.json'
      
jobs:
  build:

    runs-on: ubuntu-latest
    
    env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.MYTROUT_SONARQUBE_API_KEY }}
        SONAR_HOST_URL: ${{ secrets.MYTROUT_SONARQUBE_HOST_URL }}
        
        # These values should be changed for each individual solution. Don't forget to change the name element and paths elements. 
        SONAR_PROJECT_NAME: 'Pipelines.Steps.Data'
        WORKING_DIRECTORY: ${{ github.workspace }}/Steps/Data
        SOLUTION_NAME: 'MyTrout.Pipelines.Steps.Data.sln'
        
        # This value should change on each deployable version of this solution.
        PROJECT_VERSION: '2.0.0'
        
        # These values are used for creating an Azure SQL Server Database
        # Azure Servers cannot have periods, underscores, or upper case letters in the name.
        AZURE_SERVER_NAME: 'pipelines-steps-data'
        
    steps:
      - name: Checkout the Source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Setup .NET Core SDK 5.0.x
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: '5.0.x'
      
      # "dotnet sonarscanner end" now requires Java 11 to be installed.
      - name: Setup Java 11 for SonarQube.
        uses: actions/setup-java@v2.1.0
        with:
          distribution: 'adopt'
          java-version: '11'
      
      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MYTROUT_AZURE_TOKEN }}
        
      - name: 'Deploy Azure Resource Group'
        uses: Azure/arm-deploy@v1
        env:
          AZURE_RG_NAME: RG_${{ env.SONAR_PROJECT_NAME }}_${{ github.run_number }}
        with:
          scope: 'subscription'
          region: 'centralus'
          template: ${{ env.WORKING_DIRECTORY }}/azure-arm-resourcegroup.json
          parameters: resourceGroupName=${{ env.AZURE_RG_NAME }}
    
      - name: Deploy Azure SQL Server
        id: sqlserver
        uses: Azure/arm-deploy@v1
        env:
          AZURE_RG_NAME: RG_${{ env.SONAR_PROJECT_NAME }}_${{ github.run_number }}
          AZURE_SV_NAME: sv-${{ env.AZURE_SERVER_NAME }}-${{ github.run_number }}
        with:
          scope: 'resourcegroup'
          resourceGroupName: ${{ env.AZURE_RG_NAME }}
          template: ${{ env.WORKING_DIRECTORY }}/azure-arm-sqlserver.json
          deploymentMode: 'Incremental'
          parameters: databaseName=Cartoon databaseServerName=${{ env.AZURE_SV_NAME }}

      - name: Add the Azure SQL Server Connection String to the build server.
        shell: pwsh
        env:
           AZURE_DB_OUTPUT: ${{ steps.sqlserver.outputs.ConnectionString }}
        run: |
            if($env:AZURE_DB_OUTPUT -eq $null) {
              throw [System.IO.Exception] "Connection String not found."
            } else {
              [System.Environment]::SetEnvironmentVariable('PIPELINE_TEST_AZURE_SQL_SERVER_CONNECTION_STRING', "$env:AZURE_DB_OUTPUT",[System.EnvironmentVariableTarget]::Machine)  
            }
      
      - name: Build the DACPAC separately
        working-directory: ${{ env.WORKING_DIRECTORY }}//test/MyTrout.Pipelines.Steps.Data.Database
        run: dotnet build MyTrout.Pipelines.Steps.Data.Database.Ubuntu.csproj --configuration Release
      
      - name: Apply DACPAC to Azure SQL Server
        uses: azure/sql-action@v1
        env:
          AZURE_SV_NAME: sv-${{ env.AZURE_SERVER_NAME }}-${{ github.run_number }}
        with:
          server-name: ${{ env.AZURE_SV_NAME }}
          connection-string: ${{â€¯env.PIPELINE_TEST_AZURE_SQL_SERVER_CONNECTION_STRING }}
          dacpac-package: '{{ env.WORKING_DIRECTORY }}/test/MyTrout.Pipelines.Steps.Data.Database.Ubuntu/bin/Release/MyTrout.Pipelines.Steps.Data.Database.Ubuntu.dacpac'
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}
          
      # https://stackoverflow.com/questions/67597824/sonarscanner-for-net-fails-in-github-actions-net-5
      - name: Install Sonar global tool
        run: dotnet tool install --global dotnet-sonarscanner
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}

      - name: Begin Sonar scan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: dotnet sonarscanner begin /k:${{ env.SONAR_PROJECT_NAME }} /d:sonar.host.url=${{ secrets.MYTROUT_SONARQUBE_HOST_URL }} /o:${{ secrets.MYTROUT_SONARQUBE_ORGANIZATION }} /d:sonar.login=${{ secrets.MYTROUT_SONARQUBE_API_KEY }} /v:${{ env.PROJECT_VERSION }} /d:sonar.cs.vstest.reportsPaths=**/*.trx /d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}

      - name: Build
        env:
          PROJECT_FULL_VERSION: ${{ env.PROJECT_VERSION }}.${{ github.run_number }}
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: dotnet build ${{ env.SOLUTION_NAME }} --configuration Release -p:Version=${{ env.PROJECT_VERSION }};AssemblyVersion=${{ env.PROJECT_FULL_VERSION }};FileVersion=${{ env.PROJECT_FULL_VERSION }};SourceRevisionId=${{ env.PROJECT_VERSION }}+${{ env.GITHUB_SHA }}

        # Skip the Unit and Integration Tests when running under Dependabot. 
      - name: Test
        run:
          dotnet test  --configuration Release --no-build --no-restore --verbosity normal --collect:"XPlat Code Coverage" --logger:trx -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}

      - name: End Sonar scan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: dotnet sonarscanner end /d:sonar.login=${{ secrets.MYTROUT_SONARQUBE_API_KEY }}      
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}

      - name: Upload nupkg
        uses: actions/upload-artifact@v2
        with:
          name: nupkg
          path: ${{ env.WORKING_DIRECTORY }}/**/bin/Release/*.nupkg
        if: "github.ref == 'refs/heads/master' && github.event.pull_request.user.login != 'dependabot[bot]' && !contains(github.event.push.commits.*.author,  'dependabot[bot]')"
      
      - name: Delete resource group
        uses: Azure/CLI@v1
        env:
          AZURE_RG_NAME: RG_${{ env.SONAR_PROJECT_NAME }}_${{ github.run_number }}
        if: ${{ always() }}
        with:
          inlineScript: |
            #!/bin/bash
            if $(az group exists --name ${{ env.AZURE_RG_NAME }}) ; then
              echo "Deleting Azure resource group..."
              az group delete --name ${{ env.AZURE_RG_NAME }} -y
              echo "Azure resource group deleted"
            else            
              echo "Azure resource group doesn't exist, skipping deletion"
            fi

      #- name: Publish the package to nuget.org.
      #  run: dotnet nuget push "${{ env.WORKING_DIRECTORY }}/src/bin/Release/*.nupkg" --api-key ${{ secrets.MYTROUT_NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json"
      #  if: "github.ref == 'refs/heads/master' && github.event.pull_request.user.login != 'dependabot[bot]' && !contains(github.event.push.commits.*.author,  'dependabot[bot]')"

      #- name: Publish the package to GitHub.
      #  run: dotnet nuget push "${{ env.WORKING_DIRECTORY }}/src/bin/Release/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/mytrout/index.json"
      # if: "github.ref == 'refs/heads/master' && github.event.pull_request.user.login != 'dependabot[bot]' && !contains(github.event.push.commits.*.author,  'dependabot[bot]')"
